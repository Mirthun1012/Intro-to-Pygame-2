{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"S",
				"SPAWNING_LOC"
			],
			[
				"Y",
				"YELLOW_HEALTH_RECT"
			],
			[
				"O",
				"Outro_Screen"
			],
			[
				"M",
				"Main_Screen"
			],
			[
				"res",
				"restart_mechanics"
			],
			[
				"mai",
				"main_screen"
			],
			[
				"mainc",
				"main_screen"
			],
			[
				"CHA",
				"CHANGE_TO_MAIN"
			],
			[
				"s",
				"signal"
			],
			[
				"is",
				"is_image"
			],
			[
				"RE",
				"RESTART_BUTTON"
			],
			[
				"R",
				"RESTART_BUTTON"
			],
			[
				"se",
				"set_text_color"
			],
			[
				"te",
				"text_color"
			],
			[
				"e",
				"events"
			],
			[
				"check",
				"check_click"
			],
			[
				"B",
				"BUTTON_RECT"
			],
			[
				"__",
				"__init__"
			],
			[
				"T",
				"True"
			],
			[
				"RES",
				"RESTART_BUTTON"
			],
			[
				"new",
				"new_font"
			],
			[
				"Butt",
				"Button"
			],
			[
				"Ga",
				"GAME_FONT"
			],
			[
				"CL",
				"CLICK_SOUND"
			],
			[
				"get_",
				"get_pressed"
			],
			[
				"get",
				"get_pressed"
			],
			[
				"BORDER",
				"BORDER_RECT"
			],
			[
				"col",
				"collidepoint"
			],
			[
				"evn",
				"events"
			],
			[
				"chec",
				"check_hover_and_click"
			],
			[
				"BO",
				"BORDER"
			],
			[
				"to",
				"topleft"
			],
			[
				"C",
				"CLICK_SOUND"
			],
			[
				"win",
				"win_message"
			],
			[
				"WI",
				"WIN_MESSAGE"
			],
			[
				"OU",
				"Outro_Screen"
			],
			[
				"WIN",
				"WIN_RECT"
			],
			[
				"r",
				"run"
			],
			[
				"eve",
				"event_manager"
			],
			[
				"pos",
				"post"
			],
			[
				"Mai",
				"Main_Screen"
			],
			[
				"cha",
				"changing_current_screen"
			],
			[
				"curt",
				"current_screen"
			],
			[
				"Main",
				"Main_Screen"
			],
			[
				"upda",
				"update"
			],
			[
				"dr",
				"draw_and_display"
			],
			[
				"ma",
				"main_screen"
			],
			[
				"MA",
				"Main_Screen"
			],
			[
				"out",
				"outro"
			],
			[
				"mia",
				"main_screen"
			],
			[
				"ac",
				"active"
			],
			[
				"los",
				"losed_spaceship"
			],
			[
				"main",
				"main_screen_draw"
			],
			[
				"game",
				"game_manager"
			],
			[
				"a",
				"activate"
			],
			[
				"SP",
				"SPAWN_SOUND"
			],
			[
				"OG",
				"OG_MAX_BULLETS"
			],
			[
				"de",
				"deactivate"
			],
			[
				"m",
				"max_bullets"
			],
			[
				"upd",
				"update"
			],
			[
				"set",
				"set_mode"
			],
			[
				"ene",
				"enemy_speed"
			],
			[
				"EN",
				"enemy_speed"
			],
			[
				"get_t",
				"get_ticks"
			],
			[
				"P",
				"Power_Ups_Yellow"
			],
			[
				"max_",
				"max_bullets"
			],
			[
				"t",
				"type"
			],
			[
				"spr",
				"spritecollide"
			],
			[
				"W",
				"WIDTH"
			],
			[
				"Pow",
				"Power_Up"
			],
			[
				"G",
				"Group"
			],
			[
				"D",
				"DEAD_SOUND"
			],
			[
				"ro",
				"rotate"
			],
			[
				"Yell",
				"YELLOW"
			],
			[
				"che",
				"checking_wining"
			],
			[
				"quit",
				"quit"
			],
			[
				"H",
				"HIT_SOUND"
			],
			[
				"YE",
				"YELLOW"
			],
			[
				"wi",
				"wining_text"
			],
			[
				"HE",
				"HEALTH_FONT"
			],
			[
				"mid",
				"midright"
			],
			[
				"y",
				"Yellow_bullets"
			],
			[
				"sprite",
				"spritecollide"
			],
			[
				"RED",
				"RED_HIT"
			],
			[
				"red",
				"RED_SPACESHIP"
			],
			[
				"Red",
				"RED_SPACESHIP"
			],
			[
				"Gro",
				"GroupSingle"
			],
			[
				"Ye",
				"YELLOW_SPACESHIP"
			],
			[
				"move",
				"movement"
			],
			[
				"yel",
				"yellow_bullets"
			],
			[
				"ye",
				"yellow_bullets"
			],
			[
				"yell",
				"yellow_spaceship_rect"
			],
			[
				"loa",
				"load"
			],
			[
				"sca",
				"scale"
			],
			[
				"ser",
				"set_timer"
			],
			[
				"Playe",
				"player"
			],
			[
				"p",
				"PLAYER_WALK"
			],
			[
				"pl",
				"play"
			],
			[
				"sp",
				"speed"
			],
			[
				"lo",
				"load"
			],
			[
				"run",
				"running"
			],
			[
				"kil",
				"kill"
			],
			[
				"RECT",
				"Rect"
			],
			[
				"CLO",
				"CLOUDS"
			],
			[
				"Gr",
				"GroupSingle"
			],
			[
				"Clou",
				"CLOUD_3"
			],
			[
				"Clo",
				"CLOUD_2"
			],
			[
				"Cloud",
				"CLOUD_1"
			],
			[
				"pla",
				"play"
			],
			[
				"SOU",
				"Sound"
			],
			[
				"scree",
				"screen_state"
			],
			[
				"ki",
				"kill"
			],
			[
				"E",
				"Enemy"
			],
			[
				"Enem",
				"Enemies"
			],
			[
				"GRou",
				"Group"
			],
			[
				"player",
				"player_index"
			],
			[
				"PL",
				"PLAYER_JUMP"
			],
			[
				"app",
				"apply_gravity"
			],
			[
				"dra",
				"draw"
			],
			[
				"draw",
				"draw"
			],
			[
				"Play",
				"Player"
			],
			[
				"snail",
				"snail_surf"
			],
			[
				"snai",
				"SNAIL_SURFS"
			],
			[
				"sni",
				"snail_animation"
			],
			[
				"fly",
				"fly_animation"
			],
			[
				"sna",
				"snail_index"
			],
			[
				"PLAYE",
				"PLAYER_WALK"
			],
			[
				"play",
				"player_rect"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\"\"\"\n\tNOTE:\n\n\t\tREMEMBER: 1. SAVE/CLOSE THE FILES BEFORE COMMITING\n\t\t\t\t  2. I AM UPLOADING THIS GAME TO ITCH.IO (AS THIS IS MY FIRST WEALTH THROUGH CODE-LEVERAGE)\n\t\t\n\t\tTO DO:\n\t\t\tAdding the Outro Screen..\n\t\t\t\t1. Creating a Button class common for both intro and outro screen! (completed)\n\n\t\t\t\t.check the game for running to debug if need to.. (checked)\n\t\t\n\"\"\"\n\nimport pygame\nimport os\n\nfrom random import randint, choice\nfrom Timers import Timer\nfrom Buttons import Button\n\npygame.init()\n\n\n# Screen\nWIDTH, HEIGHT = 900, 500\n\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n\n# Colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\n\n\n# FPS\nCLOCK = pygame.time.Clock()\nFPS = 60\n\n\n# BG\nBG = pygame.image.load(os.path.join(\"Assets\", \"space.png\"))\nBG = pygame.transform.scale(BG, (WIDTH, HEIGHT))\n\n\nclass SpaceShip(pygame.sprite.Sprite):\n\n\tdef __init__(self, surface, pos, type, BORDER):\n\t\tsuper().__init__()\n\n\t\tself.position = pos\n\t\tself.type = type\n\t\tself.health = 10\n\t\tself.velocity = 3\t\t\n\t\tself.max_bullets = 3\n\n\t\t# For powerups\n\t\tself.OG_HEALTH = 10\n\t\tself.OG_VELOCITY = 3\n\t\tself.OG_MAX_BULLETS = 3\n\n\t\t# For border\n\t\tself.BORDER = BORDER\n\n\t\t# Sounds\n\t\tself.HIT_SOUND = pygame.mixer.Sound(os.path.join(\"Assets\", \"Sounds\", \"Hit.mp3\"))\n\n\t\tself.image = surface.convert_alpha()\n\t\tself.rect = self.image.get_rect(center = self.position)\n\n\tdef movement(self):\n\t\tkeys_pressed = pygame.key.get_pressed()\n\n\t\tif self.type == \"yellow\":\n\t\t\t# LEFT\n\t\t\tif keys_pressed[pygame.K_a] and self.rect.left - self.velocity > 0:\n\t\t\t\tself.rect.left -= self.velocity\n\t\t\t# DOWN\n\t\t\tif keys_pressed[pygame.K_s] and self.rect.bottom + self.velocity < HEIGHT:\n\t\t\t\tself.rect.bottom += self.velocity\n\t\t\t# RIGHT\n\t\t\tif keys_pressed[pygame.K_d] and self.rect.right + self.velocity < self.BORDER.left:\n\t\t\t\tself.rect.right += self.velocity\n\t\t\t# UP\n\t\t\tif keys_pressed[pygame.K_w] and self.rect.top - self.velocity > 0:\n\t\t\t\tself.rect.top -= self.velocity\n\n\t\telse:\n\t\t\t# LEFT\n\t\t\tif keys_pressed[pygame.K_LEFT] and self.rect.left - self.velocity > self.BORDER.right:\n\t\t\t\tself.rect.left -= self.velocity\n\t\t\t# DOWN\n\t\t\tif keys_pressed[pygame.K_DOWN] and self.rect.bottom + self.velocity < HEIGHT:\n\t\t\t\tself.rect.bottom += self.velocity\n\t\t\t# RIGHT\n\t\t\tif keys_pressed[pygame.K_RIGHT] and self.rect.right + self.velocity < WIDTH:\n\t\t\t\tself.rect.right += self.velocity\n\t\t\t# UP\n\t\t\tif keys_pressed[pygame.K_UP] and self.rect.top - self.velocity > 0:\n\t\t\t\tself.rect.top -= self.velocity\n\n\tdef checking_collision(self, Red_bullets, Yellow_bullets):\n\n\t\tgroup = Yellow_bullets if self.type == \"red\" else Red_bullets\n\n\t\tif pygame.sprite.spritecollide(self, group, True):\n\t\t\tif self.health > 0:\n\t\t\t\tself.health -= 1\n\t\t\t\tself.HIT_SOUND.play()\n\n\tdef update(self, Red_bullets, Yellow_bullets):\n\t\tself.movement()\n\t\tself.checking_collision(Red_bullets, Yellow_bullets)\n\nclass Bullet(pygame.sprite.Sprite):\n\n\tdef __init__(self, position, bullet_type):\n\t\tsuper().__init__()\n\n\t\tself.position = position\n\t\tself.bullet_type = bullet_type\n\n\t\tself.VELOCITY = 7\n\n\t\tself.image = pygame.image.load(os.path.join(\"Assets\", \"Bullet.png\")).convert_alpha()\n\t\tself.rect = self.image.get_rect(center = self.position)\n\n\tdef movement(self):\n\t\tif self.bullet_type == \"yellow\":\n\t\t\tself.rect.x += self.VELOCITY\n\n\t\t\tif self.rect.x > WIDTH:\n\t\t\t\tself.kill()\n\n\t\telif self.bullet_type == \"red\":\n\t\t\tself.rect.x -= self.VELOCITY\n\n\t\t\tif self.rect.right < 0:\n\t\t\t\tself.kill()\n\n\tdef update(self):\n\t\tself.movement()\n\nclass Power_Up(pygame.sprite.Sprite):\n\n\tdef __init__(self, spaceship):\n\t\tsuper().__init__()\n\n\t\t# Sound\n\t\tself.CLAIM_SOUND = pygame.mixer.Sound(os.path.join(\"Assets\", \"Sounds\", \"Claiming Sound.mp3\"))\n\n\t\tself.group = spaceship\n\t\tself.type = choice([\"Health\", \"Ammo\", \"Speed Up\"])\n\t\n\t\tself.timers = { \"Ammo\": Timer(5*1000), \"Speed Up\": Timer(6*1000) }\n \n\t\tself.image = pygame.image.load(os.path.join(\"Assets\", \"Power_Ups\", self.type+\".png\")).convert_alpha()\n\t\tself.rect = self.image.get_rect( topleft = (WIDTH, HEIGHT)) # Hiding it!\n\n\t\t# Positioning it!\n\t\tself.size = self.rect.width \t# width == height\n\t\tself.positioning()\n\n\tdef positioning(self): \n\t\t# topleft coordinates\n\t\tx, y = 0, 0\n\n\t\tif self.group == \"yellow\":\n\t\t\tx, y = randint(0, self.BORDER.left-self.size), randint(0, HEIGHT-self.size)\n\t\t\tself.rect.topleft = (x, y)\n\n\t\t\twhile self.is_overlap():\n\t\t\t\tx, y = randint(0, self.BORDER.left-self.size), randint(0, HEIGHT-self.size)\n\t\t\t\tself.rect.topleft = (x, y)\n\n\t\telif self.group == \"red\":\n\t\t\tx, y = randint(self.BORDER.right, WIDTH-self.size), randint(0, HEIGHT-self.size)\n\t\t\tself.rect.topleft = (x, y)\n\n\t\t\twhile self.is_overlap():\n\t\t\t\tx, y = randint(self.BORDER.right, WIDTH-self.size), randint(0, HEIGHT-self.size)\n\t\t\t\tself.rect.topleft = (x, y)\n\n\tdef is_overlap(self):\n\n\t\tif self.group == \"yellow\":\n\n\t\t\t# Checking with its own spaceship\n\t\t\tif self.rect.colliderect(YELLOW_SPACESHIP.sprite.rect):\n\t\t\t\treturn True\n\n\t\t\t# checking with other powerups\n\t\t\tif pygame.sprite.spritecollide(self, Power_Ups_Yellow, False):\n\t\t\t\treturn True\n\n\t\telif self.group == \"red\":\n\n\t\t\t# Checking with its own spaceship\n\t\t\tif self.rect.colliderect(RED_SPACESHIP.sprite.rect):\n\t\t\t\treturn True\n\n\t\t\t# checking with other powerups\n\t\t\tif pygame.sprite.spritecollide(self, Power_Ups_Red, False):\n\t\t\t\treturn True\n\n\t\t# collide with nothing\n\t\treturn False\t\t\n\n\t# Effects\n\tdef is_claiming(self):\n\t\tif self.group == \"red\": \n\t\t\tif self.rect.colliderect(RED_SPACESHIP.sprite.rect):\n\t\t\t\tCLAIM_SOUND.play()\n\t\t\t\treturn True\n\n\t\telif self.group == \"yellow\":\n\t\t\tif self.rect.colliderect(YELLOW_SPACESHIP.sprite.rect):\n\t\t\t\tCLAIM_SOUND.play()\n\t\t\t\treturn True\n\n\tdef activate(self):\n\n\t\tif self.group== \"red\":\n\t\t\t# Claiming the powerup\n\t\t\tif self.is_claiming():\n\t\t\t\t\n\t\t\t\t# Which Powerup\n\t\t\t\tif self.type == \"Health\":\n\t\t\t\t\tRED_SPACESHIP.sprite.health += 2\n\t\t\t\t\tif RED_SPACESHIP.sprite.health > RED_SPACESHIP.sprite.OG_HEALTH:\n\t\t\t\t\t\tRED_SPACESHIP.sprite.health = RED_SPACESHIP.sprite.OG_HEALTH\n\t\t\t\t\tself.kill()\n\n\t\t\t\tif self.type == \"Ammo\":\n\t\t\t\t\tRED_SPACESHIP.sprite.max_bullets = RED_SPACESHIP.sprite.OG_MAX_BULLETS + 2\n\t\t\t\t\tself.timers[self.type].activate()\n\t\t\t\t\tself.rect = self.image.get_rect( topleft = (WIDTH+5, HEIGHT+5) ) # Hide\n\n\t\t\t\tif self.type == \"Speed Up\":\n\t\t\t\t\tRED_SPACESHIP.sprite.velocity = RED_SPACESHIP.sprite.OG_VELOCITY + 2\n\t\t\t\t\tself.timers[self.type].activate()\n\t\t\t\t\tself.rect = self.image.get_rect( topleft = (WIDTH+5, HEIGHT+5) ) # Hide\n\n\t\telif self.group == \"yellow\":\n\t\t\t# Claiming the powerup\n\t\t\tif self.is_claiming():\n\n\t\t\t\t# Which Powerup\n\t\t\t\tif self.type == \"Health\":\n\t\t\t\t\tYELLOW_SPACESHIP.sprite.health += 2\n\t\t\t\t\tif YELLOW_SPACESHIP.sprite.health > YELLOW_SPACESHIP.sprite.OG_HEALTH:\n\t\t\t\t\t\tYELLOW_SPACESHIP.sprite.health = YELLOW_SPACESHIP.sprite.OG_HEALTH\n\t\t\t\t\tself.kill()\n\n\t\t\t\tif self.type == \"Ammo\":\n\t\t\t\t\tYELLOW_SPACESHIP.sprite.max_bullets = YELLOW_SPACESHIP.sprite.OG_MAX_BULLETS + 2\n\t\t\t\t\tself.timers[self.type].activate()\n\t\t\t\t\tself.rect = self.image.get_rect( topleft = (WIDTH+5, HEIGHT+5) ) # Hide\n\n\t\t\t\tif self.type == \"Speed Up\":\n\t\t\t\t\tYELLOW_SPACESHIP.sprite.velocity = YELLOW_SPACESHIP.sprite.OG_VELOCITY + 2\n\t\t\t\t\tself.timers[self.type].activate()\n\t\t\t\t\tself.rect = self.image.get_rect( topleft = (WIDTH+5, HEIGHT+5) ) # Hide\n\n\tdef deactivate(self):\n\t\tself.timers[self.type].update()\n\n\t\t# Deactivating\n\t\tif not self.timers[self.type].active:\n\n\t\t\tif self.group == \"red\":\n\n\t\t\t\tif self.type == \"Ammo\":\n\t\t\t\t\tRED_SPACESHIP.sprite.max_bullets = RED_SPACESHIP.sprite.OG_MAX_BULLETS\n\t\t\t\t\tself.kill()\n\n\t\t\t\tif self.type == \"Speed Up\":\n\t\t\t\t\tRED_SPACESHIP.sprite.velocity = RED_SPACESHIP.sprite.OG_VELOCITY\n\t\t\t\t\tself.kill()\n\n\t\t\telif self.group == \"yellow\":\n\t\t\t\t\n\t\t\t\tif self.type == \"Ammo\":\n\t\t\t\t\tYELLOW_SPACESHIP.sprite.max_bullets = YELLOW_SPACESHIP.sprite.OG_MAX_BULLETS\n\t\t\t\t\tself.kill()\n\n\t\t\t\tif self.type == \"Speed Up\":\n\t\t\t\t\tYELLOW_SPACESHIP.sprite.velocity = YELLOW_SPACESHIP.sprite.OG_VELOCITY\n\t\t\t\t\tself.kill()\n\n\tdef update(self):\n\t\tself.activate()\n\t\tif self.type != \"Health\" and self.timers[self.type].active:\n\t\t\tself.deactivate()\n\n\n# Signals\nCHANGE_TO_OUTRO = pygame.event.custom_type()\nCHANGE_TO_MAIN = pygame.event.custom_type()\nCHANGE_TO_INTRO = pygame.event.custom_type()\n\n\n\nclass Screen():\n\n\tdef __init__(self):\n\t\tself.run = True\n\t\tself.events = None\n\n\tdef event_manager(self):\n\t\t\n\t\tfor event in self.events:\n\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tself.run = False\n\n\tdef changes(self):\n\t\tpass\n\n\tdef draw_and_display(self):\n\t\tpygame.display.update()\n\n\tdef update(self, events):\n\t\tself.events = events\n\n\t\tself.event_manager()\n\t\tself.changes()\n\t\tself.draw_and_display()\n\nclass Main_Screen(Screen):\n\n\tdef __init__(self):\n\t\tsuper().__init__()\n\n\t\tself.run = True\n\t\tself.events = None\n\n\t\t# Sounds\n\t\tself.FIRE_SOUND = pygame.mixer.Sound(os.path.join(\"Assets\", \"Sounds\", \"Fire.mp3\"))\n\t\tself.DEAD_SOUND = pygame.mixer.Sound(os.path.join(\"Assets\", \"Sounds\", \"Dead.wav\"))\n\t\tself.SPAWN_SOUND = pygame.mixer.Sound(os.path.join(\"Assets\", \"Sounds\", \"Spawning Sound.mp3\"))\n\n\t\t# Timers\n\t\tself.SPAWN_POWERUP_RED = pygame.event.custom_type()\n\t\tself.SPAWN_POWERUP_YELLOW = pygame.event.custom_type()\n\n\t\t# Font\n\t\tself.HEALTH_FONT = pygame.font.Font(os.path.join(\"Assets\", \"Font.ttf\"), 100)\n\n\t\t# Border\n\t\tself.BORDER = pygame.Rect(WIDTH/2 - 5, 0, 10, HEIGHT)\n\n\t\t# Spaceships\n\t\tself.SPAWNING_LOC = [ ((WIDTH//2)-250, HEIGHT//2), ((WIDTH//2)+250 , HEIGHT//2) ] # For Center Argument \n\n\t\tself.YELLOW_SPACESHIP = SpaceShip(pygame.transform.rotate(pygame.image.load(os.path.join(\"Assets\", \"spaceship_yellow.png\")), 90), self.SPAWNING_LOC[0], \"yellow\", self.BORDER)\n\t\tself.YELLOW_SPACESHIP = pygame.sprite.GroupSingle(sprite = self.YELLOW_SPACESHIP)\n\t\tself.RED_SPACESHIP = SpaceShip(pygame.transform.rotate(pygame.image.load(os.path.join(\"Assets\", \"spaceship_red.png\")), -90), self.SPAWNING_LOC[1], \"red\", self.BORDER)\n\t\tself.RED_SPACESHIP = pygame.sprite.GroupSingle(sprite = self.RED_SPACESHIP)\n\n\t\t# Bullets\n\t\tself.Red_bullets = pygame.sprite.Group()\n\t\tself.Yellow_bullets = pygame.sprite.Group()\n\n\t\t# Power Ups\n\t\tself.MAX_POWERUPS = 3\n\n\t\tself.Power_Ups_Red = pygame.sprite.Group()\n\t\tself.Power_Ups_Yellow = pygame.sprite.Group()\n\n\t\t# Health\n\t\tself.YELLOW_HEALTH = self.HEALTH_FONT.render(str(self.YELLOW_SPACESHIP.sprite.health), True, YELLOW)\n\t\tself.RED_HEALTH = self.HEALTH_FONT.render(str(self.RED_SPACESHIP.sprite.health), True, RED)\n\n\t\tself.RED_HEALTH_RECT = self.RED_HEALTH.get_rect( center = self.SPAWNING_LOC[1])\n\t\tself.YELLOW_HEALTH_RECT = self.YELLOW_HEALTH.get_rect( center = self.SPAWNING_LOC[0])\n\n\tdef event_manager(self):\n\n\t\tfor eve in self.events:\n\n\t\t\t# Quitting\n\t\t\tif eve.type == pygame.QUIT:\n\t\t\t\tself.run = False\n\n\t\t\t# Firing!\n\t\t\tif eve.type == pygame.KEYDOWN:\n\t\t\t\tif eve.key == pygame.K_LCTRL and len(self.Yellow_bullets.sprites()) < self.YELLOW_SPACESHIP.sprite.max_bullets:\n\t\t\t\t\tself.Yellow_bullets.add( Bullet(self.YELLOW_SPACESHIP.sprite.rect.midright, \"yellow\") )\n\t\t\t\t\tself.FIRE_SOUND.play()\n\n\t\t\t\tif eve.key == pygame.K_RCTRL and len(self.Red_bullets.sprites()) < self.RED_SPACESHIP.sprite.max_bullets:\n\t\t\t\t\tself.Red_bullets.add( Bullet(self.RED_SPACESHIP.sprite.rect.midleft, \"red\") )\n\t\t\t\t\tself.FIRE_SOUND.play()\n\n\t\t\t# Spawning Power Ups!\n\t\t\tif eve.type == self.SPAWN_POWERUP_RED:\n\t\t\t\tif len(self.Power_Ups_Red.sprites()) < self.MAX_POWERUPS:\n\t\t\t\t\tself.Power_Ups_Red.add(Power_Up(\"red\"))\n\t\t\t\t\tself.SPAWN_SOUND.play()\n\n\t\t\tif eve.type == self.SPAWN_POWERUP_YELLOW:\n\t\t\t\tif len(self.Power_Ups_Yellow.sprites()) < self.MAX_POWERUPS:\n\t\t\t\t\tself.Power_Ups_Yellow.add(Power_Up(\"yellow\"))\n\t\t\t\t\tself.SPAWN_SOUND.play()\n\n\tdef changes(self):\n\n\t\t# Updates\n\t\tself.Red_bullets.update()\n\t\tself.Yellow_bullets.update()\n\n\t\tself.RED_SPACESHIP.update(self.Red_bullets, self.Yellow_bullets)\n\t\tself.YELLOW_SPACESHIP.update(self.Red_bullets, self.Yellow_bullets)\n\n\t\tself.Power_Ups_Red.update()\n\t\tself.Power_Ups_Yellow.update()\n\n\t\t# checking if anybody wins\n\t\tif self.RED_SPACESHIP.sprite.health == 0:\n\t\t\tself.DEAD_SOUND.play()\n\t\t\tpygame.event.post(pygame.event.Event(CHANGE_TO_OUTRO, {\"won_spaceship\": \"Yellow\"}))\n\t\t\n\t\telif self.YELLOW_SPACESHIP.sprite.health == 0:\n\t\t\tself.DEAD_SOUND.play()\n\t\t\tpygame.event.post(pygame.event.Event(CHANGE_TO_OUTRO, {\"won_spaceship\": \"Red\"}))\n\t\t\t\n\tdef draw_and_display(self):\n\t\t# BG\n\t\tscreen.blit(BG, (0,0))\n\t\tpygame.draw.rect(screen, BLACK, self.BORDER)\n\n\t\t# bullets\n\t\tself.Yellow_bullets.draw(screen)\n\t\tself.Red_bullets.draw(screen)\n\n\t\t# healths\n\t\tself.YELLOW_HEALTH = self.HEALTH_FONT.render(str(self.YELLOW_SPACESHIP.sprite.health), True, YELLOW)\n\t\tself.RED_HEALTH = self.HEALTH_FONT.render(str(self.RED_SPACESHIP.sprite.health), True, RED)\n\n\t\tscreen.blit(self.YELLOW_HEALTH, self.YELLOW_HEALTH_RECT)\n\t\tscreen.blit(self.RED_HEALTH, self.RED_HEALTH_RECT)\n\n\t\t# power ups\n\t\tself.Power_Ups_Red.draw(screen)\n\t\tself.Power_Ups_Yellow.draw(screen)\n\n\t\t# spaceships\n\t\tself.RED_SPACESHIP.draw(screen)\n\t\tself.YELLOW_SPACESHIP.draw(screen)\n\n\t\t# Displaying\n\t\tpygame.display.update()\n\n\tdef update(self, events):\n\t\tself.events = events\n\n\t\tself.event_manager()\n\t\tself.changes()\n\t\tself.draw_and_display()\n\n# pygame.time.set_timer(SPAWN_POWERUP_RED, randint(8*1000, 20*1000))    # TEST\n# pygame.time.set_timer(SPAWN_POWERUP_YELLOW, randint(8*1000, 20*1000))  # TEST\n\n\nclass Outro_Screen(Screen):\n\n\tdef __init__(self, won_spaceship):\n\t\tsuper().__init__()\n\n\t\tself.run = True\n\t\tself.events = None\n\n\t\t# Variables\n\t\tself.won_spaceship = won_spaceship\n\n\t\t# Fonts\n\t\tself.WIN_FONT = pygame.font.Font(os.path.join(\"Assets\", \"Font.ttf\"), 150)\n\n\t\t# Winning message ( Will Update in `changes` func )\n\t\tself.win_message = None\n\t\tself.win_message_rect = None\n\n\t\t# Buttons\n\t\tself.RESTART_BUTTON = Button((200, 350), \"Restart\", pygame.font.Font(os.path.join(\"Assets\", \"Font.ttf\"), 50))\n\t\tself.MENU_BUTTON = Button((750,350), \"Menu\", pygame.font.Font(os.path.join(\"Assets\", \"Font.ttf\"), 50))\n\n\t\tself.buttons = pygame.sprite.Group(self.RESTART_BUTTON, self.MENU_BUTTON)\n\n\tdef event_manager(self):\n\t\t\n\t\tfor event in self.events:\n\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tself.run = False\n\n\tdef changes(self):\n\t\t\n\t\t# Wining Message\n\t\tself.win_message = self.WIN_FONT.render(self.won_spaceship+\" Wins\", True, RED if self.won_spaceship == \"Red\" else YELLOW)\n\t\tself.win_message_rect = self.win_message.get_rect(center = ( (WIDTH/2 + 12) if self.won_spaceship == \"Red\" else (WIDTH/2 + 3) , HEIGHT/2 - 100))\n\n\t\t# Buttons\n\t\tself.buttons.update(self.events)\n\n\t\tif self.RESTART_BUTTON.is_clicked:\n\t\t\tpygame.event.post(pygame.event.Event(CHANGE_TO_MAIN))\n\n\t\telif self.MENU_BUTTON.is_clicked:\n\t\t\tpass\n\n\n\tdef draw_and_display(self):\n\n\t\t# Win Message\n\t\tscreen.blit(self.win_message, self.win_message_rect)\n\n\t\t# Buttons\n\t\tself.buttons.draw(screen)\n\t\t\n\t\tpygame.display.update()\n\n\tdef update(self, events):\n\t\tself.events = events\n\n\t\tself.event_manager()\n\t\tself.changes()\n\t\tself.draw_and_display()\n\ndef main():\n\n\tcurrent_screen = Outro_Screen(\"Red\")\n\n\t# Game loop\n\twhile current_screen.run:\n\n\t\t# getting events\n\t\tevents = pygame.event.get()\n\t\t\n\n\t\t# Getting signals to change the current screen!\n\t\tfor signal in events:\n\n\t\t\t# Changing to Outro screen\t\t\t\n\t\t\tif signal.type == CHANGE_TO_OUTRO:\n\t\t\t\tcurrent_screen = Outro_Screen(signal.won_spaceship)\n\n\t\t\t# Changing to Main screen\n\t\t\telif signal.type == CHANGE_TO_MAIN:\n\t\t\t\tcurrent_screen = Main_Screen()\n\n\n\n\t\tcurrent_screen.update(events)\n\n\n\t\tCLOCK.tick(FPS)\n\n\n\tpygame.quit()\n\n\nif __name__ == \"__main__\":\n\tmain()",
			"file": "/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/main.py",
			"file_size": 15821,
			"file_write_time": 133662855542421505,
			"settings":
			{
				"buffer_size": 15252,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAANYKAAAAAAAA1goAAAAAAAAOAAAALCBTUEFXTklOR19MT0M",
					"AQAAAAAAAAABAAAA1goAAAAAAADkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAPwtAAAAAAAA/C0AAAAAAAATAAAALCBzZWxmLlNQQVdOSU5HX0xPQw",
					"AQAAAAAAAAABAAAA/C0AAAAAAAAPLgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAE0uAAAAAAAATS4AAAAAAAATAAAALCBzZWxmLlNQQVdOSU5HX0xPQw",
					"AQAAAAAAAAABAAAATS4AAAAAAABgLgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAPEtAAAAAAAA8S0AAAAAAAALAAAALCAicGxheWluZyI",
					"AQAAAAAAAAABAAAA8S0AAAAAAAD8LQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAADcuAAAAAAAANy4AAAAAAAALAAAALCAicGxheWluZyI",
					"AQAAAAAAAAABAAAANy4AAAAAAABCLgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAMsKAAAAAAAAywoAAAAAAAALAAAAIGdhbWVfc3RhdGXKCgAAAAAAAMoKAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAywoAAAAAAADWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAADgLAAAAAAAAOAsAAAAAAABsAAAAZWxzZToKCQkJc2VsZi5fX2luaXRfXyhzZWxmLmltYWdlLCBTUEFXTklOR19MT0NbMF0gaWYgc2VsZi50eXBlID09ICJ5ZWxsb3ciIGVsc2UgU1BBV05JTkdfTE9DWzFdLCBzZWxmLnR5cGUp",
					"AQAAAAAAAAABAAAAOAsAAAAAAACkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					4,
					"left_delete",
					null,
					"BAAAAM8KAAAAAAAAzwoAAAAAAAAbAAAAaWYgZ2FtZV9zdGF0ZSA9PSAicGxheWluZyI6zgoAAAAAAADOCgAAAAAAAAEAAAAJzQoAAAAAAADNCgAAAAAAAAEAAAAJzAoAAAAAAADMCgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA6goAAAAAAADPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"unindent",
					null,
					"AgAAAM0KAAAAAAAAzQoAAAAAAAABAAAACd8KAAAAAAAA3woAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA0AoAAAAAAADqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAABgLAAAAAAAAGAsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAGQsAAAAAAAAZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAABcLAAAAAAAAFwsAAAAAAAABAAAACRYLAAAAAAAAFgsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAGAsAAAAAAAAYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"left_delete",
					null,
					"AQAAABULAAAAAAAAFQsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFgsAAAAAAAAWCwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABULAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAYCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					2,
					"left_delete",
					null,
					"AgAAABcLAAAAAAAAFwsAAAAAAAABAAAACRYLAAAAAAAAFgsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAGAsAAAAAAAAYCwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sublimemer",
				"Sublime Merge: Open Repository"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"set",
				"Set Syntax: Python"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"pyh",
				"Set Syntax: Python"
			],
			[
				"ter",
				"Terminus: Close"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"set syntax py",
				"Set Syntax: Python"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"Package Control: add ",
				"Package Control: Advanced Install Packages"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"pyhton",
				"Build With: Python"
			],
			[
				"termi",
				"Terminus: Reset"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"intsall p",
				"Package Control: Install Package"
			],
			[
				"install",
				"Terminus: Toggle Panel"
			],
			[
				"ins",
				"Install Package Control"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"python",
				"Set Syntax: Python"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2"
	],
	"file_history":
	[
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/main.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Buttons.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Test.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Test.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Timers.py",
		"/C/Users/TOSHIBA/Downloads/2D-Tank-Game-master/2D_Tank_Game.py",
		"/C/Users/TOSHIBA/Desktop/Test.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/CLASSES.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Files/Imports/main screen.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Intro to pygame 2.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/Sublime Project/SpaceShooters.sublime-project",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame/Intro to pygame.py",
		"/C/Users/TOSHIBA/Desktop/UltimatePygameIntro-main/runner_class only.py",
		"/C/Users/TOSHIBA/Desktop/UltimatePygameIntro-main/runner_video.py",
		"/C/Users/TOSHIBA/Desktop/10th_Mathematics_EM_www.tntextbooks.in.pdf",
		"/C/Users/TOSHIBA/Desktop/DElete it",
		"/C/Users/TOSHIBA/Desktop/DElete it.py",
		"/C/Users/TOSHIBA/AppData/Local/Programs/Python/Python312/Lib/site-packages/pygame/examples/go_over_there.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Turtle/Intro.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Tutorial_1.py",
		"/E/Mirthun file/Programming/Python/Tutorial/Pygame/Main",
		"/C/Users/TOSHIBA/Desktop/hello.py",
		"/E/mirthun file/HTML/tutorials/phone.html",
		"/E/mirthun file/HTML/tutorials/for_phone.css",
		"/C/Users/TOSHIBA/Desktop/foranimation.css",
		"/C/Users/TOSHIBA/Desktop/animation.html",
		"/E/mirthun file/HTML/Bucky_tutorial/index.html",
		"/E/mirthun file/HTML/Bucky_tutorial/javascript_code.js",
		"/E/mirthun file/HTML/Bucky_tutorial/second page.html",
		"/C/Users/TOSHIBA/Desktop/position.html",
		"/C/Users/TOSHIBA/Desktop/deleteit.html",
		"/E/mirthun file/HTML/tutorials/for_summa.css",
		"/E/mirthun file/HTML/tutorials/summa.html",
		"/E/mirthun file/HTML/animations/animation.html",
		"/C/Users/TOSHIBA/Desktop/priyadharshan.html",
		"/E/mirthun file/FRIENDS/car_quiz/logo/images/download.jfif",
		"/C/Users/TOSHIBA/Downloads/download__602a890c13d72/602a8910bc2ea_PassssW0rdFile.txt",
		"/C/Users/TOSHIBA/Desktop/hi.cpp",
		"/C/Users/TOSHIBA/Desktop/animation",
		"/C/Users/TOSHIBA/Desktop/summaaaa.html",
		"/C/Users/TOSHIBA/Desktop/summaaaa"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"button_rect",
			"rect",
			"5",
			"TITLE_FONT",
			"BORDER"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"BUTTON_RECT",
			"button_rect",
			"BORDER_WIDTH",
			"self.BORDER"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/E/Mirthun file/Programming/Python/Tutorial/Pygame/Intro to pygame 2/main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15252,
						"regions":
						{
						},
						"selection":
						[
							[
								8333,
								8333
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1134.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 132.0
	},
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 132.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "SpaceShooters.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"E:\\Mirthun file\\Programming\\Python\\Tutorial\\Pygame\\Intro to pygame 2\\Space Shooters.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
